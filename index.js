import 'dotenv/config';
import { Telegraf } from 'telegraf';
import { Low } from 'lowdb';
import { JSONFile } from 'lowdb/node';
import * as dotenv from 'dotenv';
import leoProfanity from 'leo-profanity';

dotenv.config();
leoProfanity.loadDictionary('ru');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const adapter = new JSONFile('./db.json');
const db = new Low(adapter);
await db.read();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
if (!db.data) {
  db.data = {
    pairs: [],  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ pairs
    filters: ['—Ü–µ–Ω–∞', '—Å—Ä–æ—á–Ω–æ', '–±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤', '—Ç–æ—Ä–≥', '–Ω–µ–¥–æ—Ä–æ–≥–æ'],
    admins: [],
    forwardingEnabled: true
  };
  await db.write();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∫–∏ –ø–æ sourceChatId
function getPairBySource(sourceChatId) {
  return db.data.pairs ? db.data.pairs.find(p => p.source === sourceChatId) : null;
}

// –ö–æ–º–∞–Ω–¥–∞: –¥–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑–∫—É (–∏—Å—Ç–æ—á–Ω–∏–∫ ‚Üí –ø–æ–ª—É—á–∞—Ç–µ–ª–∏)
bot.command('add_pair', async (ctx) => {
  const [source, ...targets] = ctx.message.text.split(' ').slice(1);
  if (!source || targets.length === 0) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ: /add_pair <source_chat_id> <target_chat_id_1> <target_chat_id_2> ...');
  }

  const sourceChatId = parseInt(source);
  const targetChatIds = targets.map(id => parseInt(id));

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ db.data.pairs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!db.data.pairs) {
    db.data.pairs = [];  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
  }

  let pair = getPairBySource(sourceChatId);
  if (pair) {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
    targetChatIds.forEach(target => {
      if (!pair.targets.includes(target)) {
        pair.targets.push(target);
      }
    });
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑–∫—É
    db.data.pairs.push({ source: sourceChatId, targets: targetChatIds });
  }

  await db.write();
  ctx.reply(`‚úÖ –°–≤—è–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${sourceChatId} ‚Üí ${targetChatIds.join(', ')}`);
});

// –ö–æ–º–∞–Ω–¥–∞: —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É —Å–≤—è–∑–∫—É (–∏—Å—Ç–æ—á–Ω–∏–∫ ‚Üí –ø–æ–ª—É—á–∞—Ç–µ–ª—å)
bot.command('remove_pair', async (ctx) => {
  const [source, target] = ctx.message.text.split(' ').slice(1);
  if (!source || !target) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ: /remove_pair <source_chat_id> <target_chat_id>');
  }

  const sourceChatId = parseInt(source);
  const targetChatId = parseInt(target);

  const pair = getPairBySource(sourceChatId);
  if (pair) {
    pair.targets = pair.targets.filter(id => id !== targetChatId);
    if (pair.targets.length === 0) {
      db.data.pairs = db.data.pairs.filter(p => p.source !== sourceChatId);
    }
    await db.write();
    ctx.reply(`‚úÖ –°–≤—è–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${sourceChatId} ‚Üí ${targetChatId}`);
  } else {
    ctx.reply('‚ùå –°–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≤—è–∑–æ–∫
bot.command('list_pairs', (ctx) => {
  const pairs = db.data.pairs || [];  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ pairs
  const pairsList = pairs.map(pair => {
    return `üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${pair.source}\n‚û°Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: ${pair.targets.join(', ')}`;
  }).join('\n\n');

  ctx.reply(pairsList || '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  const chatId = ctx.chat.id;

  if (!db.data.forwardingEnabled) return;

  const msg = ctx.message;
  let text = msg.text || msg.caption || '';
  const lowerText = text.toLowerCase();

  // –§–∏–ª—å—Ç—Ä—ã
  const hasManualFilter = db.data.filters.some(word => lowerText.includes(word.toLowerCase()));
  const hasProfanity = leoProfanity.check(text);
  if (hasManualFilter || hasProfanity) return;

  // –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  const pair = getPairBySource(chatId);
  if (!pair) return;

  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –∞–¥—Ä–µ—Å–æ–≤, —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ —Å–ª–æ–≤-–∏—Å–∫–ª—é—á–µ–Ω–∏–π
  const phoneRegex = /(?:\+?\d{1,3})?[ .-]?\(?\d{3}\)?[ .-]?\d{3}[ .-]?\d{2}[ .-]?\d{2}/g;
  const addressRegex = /(—É–ª\.|—É–ª–∏—Ü–∞|–ø—Ä–æ—Å–ø–µ–∫—Ç|–ø—Ä-—Ç|–ø–µ—Ä\.|–ø–µ—Ä–µ—É–ª–æ–∫|–≥\.|–≥–æ—Ä–æ–¥|–¥\.|–¥–æ–º)[^\n,.!?]*/gi;
  const excludedWords = db.data.filters;

  function cleanText(input) {
    let output = input;
    output = output.replace(phoneRegex, '');
    output = output.replace(addressRegex, '');
    excludedWords.forEach(word => {
      const wordRegex = new RegExp(word, 'gi');
      output = output.replace(wordRegex, '');
    });
    return output.trim();
  }

  const cleanedText = cleanText(text);
  if (!cleanedText) return;

  // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã
  for (const targetChatId of pair.targets) {
    try {
      if (msg.text || msg.caption) {
        await bot.telegram.sendMessage(targetChatId, cleanedText);
      } else if (msg.photo) {
        const photo = msg.photo[msg.photo.length - 1];
        await bot.telegram.sendPhoto(targetChatId, photo.file_id, {
          caption: cleanedText
        });
      } else if (msg.video) {
        await bot.telegram.sendVideo(targetChatId, msg.video.file_id, {
          caption: cleanedText
        });
      } else if (msg.document) {
        await bot.telegram.sendDocument(targetChatId, msg.document.file_id, {
          caption: cleanedText
        });
      } else if (msg.audio) {
        await bot.telegram.sendAudio(targetChatId, msg.audio.file_id);
      } else if (msg.voice) {
        await bot.telegram.sendVoice(targetChatId, msg.voice.file_id);
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ:', err);
    }
  }
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
